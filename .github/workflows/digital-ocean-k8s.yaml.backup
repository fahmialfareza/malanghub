name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main
    paths:
      - "server/**"
      - "infra/server/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: echo "MONGO_URI"=$MONGO_URI > server/.env.production
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
      - run: echo "REDIS_URI"=$REDIS_URI >> server/.env.production
        env:
          REDIS_URI: ${{ secrets.REDIS_URI }}
      - run: echo "JWT_SECRET"=$JWT_SECRET >> server/.env.production
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      - run: echo "GOOGLE_CLIENT_ID"=$GOOGLE_CLIENT_ID >> server/.env.production
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      - run: echo "CLOUDINARY_CLOUD_NAME"=$CLOUDINARY_CLOUD_NAME >> server/.env.production
        env:
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      - run: echo "CLOUDINARY_API_KEY"=$CLOUDINARY_API_KEY >> server/.env.production
        env:
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      - run: echo "CLOUDINARY_API_SECRET"=$CLOUDINARY_API_SECRET >> server/.env.production
        env:
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      - run: echo "NEW_RELIC_APP_NAME"=$NEW_RELIC_APP_NAME >> server/.env.production
        env:
          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
      - run: echo "NEW_RELIC_LICENSE_KEY"=$NEW_RELIC_LICENSE_KEY >> server/.env.production
        env:
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
      - run: echo "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED"=$NEW_RELIC_DISTRIBUTED_TRACING_ENABLED >> server/.env.production
        env:
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: ${{ secrets.NEW_RELIC_DISTRIBUTED_TRACING_ENABLED }}
      - run: echo "NEW_RELIC_LOG"=$NEW_RELIC_LOG >> server/.env.production
        env:
          NEW_RELIC_LOG: ${{ secrets.NEW_RELIC_LOG }}
      - run: echo "NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED"=$NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED >> server/.env.production
        env:
          NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED: ${{ secrets.NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED }}
      - run: echo "NEW_RELIC_APPLICATION_LOGGING_FORWARDING_MAX_SAMPLES_STORED"=$NEW_RELIC_APPLICATION_LOGGING_FORWARDING_MAX_SAMPLES_STORED >> server/.env.production
        env:
          NEW_RELIC_APPLICATION_LOGGING_FORWARDING_MAX_SAMPLES_STORED: ${{ secrets.NEW_RELIC_APPLICATION_LOGGING_FORWARDING_MAX_SAMPLES_STORED }}

      # Generate a timestamp
      - name: Generate timestamp
        id: vars
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      # Build Docker image with timestamp tag
      - name: Build Docker image
        run: docker build -t registry.digitalocean.com/fahmialfareza/malanghub-api:${{ steps.vars.outputs.timestamp }} .
        working-directory: server

      # Log in to Digital Ocean Container Registry
      - name: Log in to Digital Ocean Container Registry
        run: echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin

      # Push Docker image to Digital Ocean Container Registry
      - name: Push Docker image to Digital Ocean Container Registry
        run: docker push registry.digitalocean.com/fahmialfareza/malanghub-api:${{ steps.vars.outputs.timestamp }}

      # Set up DigitalOcean CLI (doctl) and get kubeconfig
      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get kubeconfig for DigitalOcean Kubernetes
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.KUBERNETES_CLUSTER_NAME }}

      # Update Kubernetes deployment with the new image
      - name: Update Kubernetes deployment with new image
        run: |
          kubectl set image deployment/malanghub-api-depl malanghub-api=registry.digitalocean.com/fahmialfareza/malanghub-api:${{ steps.vars.outputs.timestamp }}

      # Optionally restart the deployment to apply changes
      - name: Restart Kubernetes deployment
        run: kubectl rollout restart deployment malanghub-api-depl
